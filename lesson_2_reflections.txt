What happens when you initialize a repository? Why do you need to do it?

	When you initialize a respository you are telling git that it needs to setup the folder to so that git can track changes and the various commits and branches. 

	You need to initialize a folder because you don't want git setup on every single directory on your workstation. It is better to initialize the specific folders containing projects that are important to you. 

How is the staging area different from the working directory and the repository?
What value do you think it offers?

	The staging area has files that will be committed to the responsitory. It seperates out what is ready for primetime and what is not.

	It lets the developer add only files that are relevant to the repository or break up the files into logical commits.

How can you use the staging area to make sure you have one commit per logical change?

	You can use the staging area to make sure you have only one logical commit per change by adding files as appropriate rather than adding all files in one shot. 

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	Some situations when branches would be helpful in keeping your history organized are when you want to try a new experimental function. Perhaps you're porting to another language or another operating system? 

	You could work on different these branches without impacting your main working branch. 

How do the diagrams help you visualize the branch structure?

	Diagrams help you visualize the branch structure by provide a way to list out what's happened where along the repository. 

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

	The result of merging two branches together is that the file changes are incorporated into the changes on the branched being merged to. 

	We represent it in the diagram the way we do to show when the paths diverged and when they came back together.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?

	If the automatic merging works and doesn't have any conflicts, it can merge two branches together quickly. Merging manually could require a line-by-line comparison that could take a lot time to complete depending on the size of the file(s). 